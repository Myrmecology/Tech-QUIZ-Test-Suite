# Tech Quiz Test Suite

## Overview

This project extends a functional MERN-stack Tech Quiz application with comprehensive testing capabilities using Cypress. The implementation includes both component-level tests and end-to-end integration tests to ensure application reliability and maintainability.

## Technology Stack

- **Frontend**: React with Bootstrap styling
- **Backend**: Node.js with Express
- **Database**: MongoDB with Mongoose ODM
- **Testing**: Cypress for component and E2E testing

## Installation

To install and configure the application:

```bash
# Clone the repository (if using Git)
git clone <repository-url>

# Navigate to project directory
cd tech-quiz-test-suite

# Install dependencies
npm install

# Configure environment variables
cp server/.env.example server/.env

# Seed the database
npm run seed
```

## Running the Application

The application consists of a server and client that need to run concurrently:

```bash
# Start both server and client in development mode
npm run start:dev

# Alternatively, run server and client separately
# Terminal 1 - Start the server
npm run server:dev

# Terminal 2 - Start the client
npm run client:dev
```

Once running, access the application at [http://localhost:3001](http://localhost:3001).

## Testing Suite

The project implements a robust testing strategy using Cypress for both component and end-to-end testing.

### Test Structure

```
cypress/
├── component/          # Component tests
│   └── Quiz.cy.jsx     # Tests for the Quiz component
├── e2e/                # End-to-end tests
│   └── quiz.cy.js      # Tests for the entire quiz flow
├── fixtures/           # Test data
│   └── questions.json  # Sample quiz questions for testing
├── support/            # Support files for Cypress
│   ├── commands.js     # Custom commands
│   ├── component.js    # Component testing configuration
│   └── e2e.js          # E2E testing configuration
└── tsconfig.json       # TypeScript configuration for tests
```

### Running Tests

To execute the test suite:

```bash
# Run all tests (component and e2e)
npm run test

# Run only component tests
npx cypress run --component

# Run only end-to-end tests
npx cypress run --e2e

# Open Cypress GUI for interactive testing
npx cypress open
```

**Note**: Ensure the application (both server and client) is running before executing the tests.

## Application Features

The Tech Quiz application provides the following features:

1. Randomized quiz questions from a MongoDB database
2. Interactive quiz interface with multiple-choice options
3. Score tracking and display
4. Option to restart the quiz after completion

## Testing Implementation Details

### Component Tests

The component tests verify that the Quiz component functions correctly in isolation:

- Renders correctly on initial load
- Displays the start button
- Shows questions when the quiz starts
- Correctly displays answer options

### End-to-End Tests

The E2E tests validate the complete user journey through the application:

- Application loads with the start button
- Quiz begins when the start button is clicked
- Questions appear one at a time
- User can select answers to progress
- Final score is displayed after answering all questions
- Quiz can be restarted

## Project Structure

```
.
├── client/                 # React frontend application
├── cypress/                # Cypress testing framework
├── server/                 # Express/Node.js backend
│   ├── src/
│   │   ├── config/         # Database configuration
│   │   ├── controllers/    # API controllers
│   │   ├── models/         # Mongoose models
│   │   ├── routes/         # API routes
│   │   ├── seeds/          # Database seeding logic
│   │   └── server.ts       # Server entry point
├── cypress.config.ts       # Cypress configuration
├── package.json            # Project dependencies and scripts
└── README.md               # Project documentation
```

## Development Considerations

During the development of this testing suite, particular attention was paid to:

1. **Test Isolation**: Ensuring tests do not interfere with each other
2. **Appropriate Assertions**: Validating both UI elements and application state
3. **Error Handling**: Graceful handling of edge cases and failures
4. **Maintainability**: Well-structured tests that can evolve with the application

## Video Demonstration

A video walkthrough of the application and testing implementation is available 

## Acknowledgments

This project was developed as part of an advanced web development curriculum, focusing on testing methodologies for modern web applications.

## License

This project is licensed under the MIT License - see the LICENSE file for details.
## https://github.com/Myrmecology/Tech-QUIZ-Test-Suite
## Happy coding everyone 